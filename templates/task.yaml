apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
  namespace: {{ .Values.general.toko }}-{{ .Release.Name }}-{{ .Values.general.env }}
  labels:
    app.kubernetes.io/part-of: {{ .Values.general.toko }}-{{ .Release.Name }}-{{ .Values.general.env }}
spec:
  workspaces:
    - name: output
    - name: ssh-directory
  params:
    - name: url
      type: string
    - name: refspec
      type: string
      default: ""
    - name: deleteExisting
      type: string
      default: "true"
    - name: userHome
      type: string
      default: /tekton/home
    - name: gitInitImage
      type: string
      default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:latest"
    - name: cloneAction
      type: string
    - name: gitBranch
      type: string
  steps:
    - name: clone
      image: "$(params.gitInitImage)"
      resources:
        requests:
          cpu: 128m
          memory: 128Mi
        limits:
          cpu: 512m
          memory: 512Mi
      env:
      - name: HOME
        value: "$(params.userHome)"
      - name: PARAM_URL
        value: $(params.url)
      - name: PARAM_REFSPEC
        value: $(params.refspec)
      - name: PARAM_DELETE_EXISTING
        value: $(params.deleteExisting)
      - name: PARAM_USER_HOME
        value: $(params.userHome)
      - name: WORKSPACE_OUTPUT_PATH
        value: $(workspaces.output.path)
      - name: WORKSPACE_SSH_DIRECTORY_PATH
        value: $(workspaces.ssh-directory.path)
      - name: GIT_SSH_COMMAND
        value: 'ssh -i $(params.userHome)/.ssh/id_rsa -o StrictHostKeyChecking=no'
      - name: BRANCH
        value: $(params.gitBranch)
      - name: CLONE_ACTION
        value: $(params.cloneAction)
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
      script: |
        #!/usr/bin/env sh
        set -eu

        if [ "$CLONE_ACTION" = "clone" ] ; then

            if [ -f $WORKSPACE_SSH_DIRECTORY_PATH/id_rsa ] ; then
            mkdir -pv ${HOME}/.ssh
            cp -v $WORKSPACE_SSH_DIRECTORY_PATH/id_rsa ${HOME}/.ssh
            chmod 700 $HOME/.ssh
            chmod 400 $HOME/.ssh/id_rsa
            else
            echo "No SSH key found."
            exit 1
            fi

            if [ "$PARAM_DELETE_EXISTING" = "true" ] ; then
            rm -rfv $WORKSPACE_OUTPUT_PATH/*
            ls -d $WORKSPACE_OUTPUT_PATH/.[!.]?* | xargs rm -rfv
            fi

            git clone -b $BRANCH $PARAM_URL $WORKSPACE_OUTPUT_PATH
        
        elif [ "$CLONE_ACTION" = "pull" ] ; then

            if [ -f $WORKSPACE_SSH_DIRECTORY_PATH/id_rsa ] ; then
            mkdir -pv ${HOME}/.ssh
            cp -v $WORKSPACE_SSH_DIRECTORY_PATH/id_rsa ${HOME}/.ssh
            chmod 700 $HOME/.ssh
            chmod 400 $HOME/.ssh/id_rsa
            else
            echo "No SSH key found."
            exit 1
            fi

            git config --global --add safe.directory /workspace/output
            cd $WORKSPACE_OUTPUT_PATH; git pull

        fi